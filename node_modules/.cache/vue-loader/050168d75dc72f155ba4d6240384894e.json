{"remainingRequest":"F:\\webstormProjects\\hz-websit-admin\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!F:\\webstormProjects\\hz-websit-admin\\src\\views\\customer\\customerList.vue?vue&type=script&lang=js&","dependencies":[{"path":"F:\\webstormProjects\\hz-websit-admin\\src\\views\\customer\\customerList.vue","mtime":1630940335000},{"path":"F:\\webstormProjects\\hz-websit-admin\\node_modules\\babel-loader\\lib\\index.js","mtime":315532800000},{"path":"F:\\webstormProjects\\hz-websit-admin\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"F:\\webstormProjects\\hz-websit-admin\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}